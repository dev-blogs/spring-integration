<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/batch
http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<job id="importProducts" xmlns="http://www.springframework.org/schema/batch">
		<step id="decompress" next="readWriteProducts">
			<tasklet ref="decompressTasklet"/>
		</step>
		<step id="readWriteProducts">
			<tasklet>
				<chunk reader="reader" processor="processor" writer="writer" commit-interval="10" skip-limit="5" retry-limit="3">
					<skippable-exception-classes>
						<include class="org.springframework.batch.item.file.FlatFileParseException" />
					</skippable-exception-classes>
					<retryable-exception-classes>
						<include class="com.example.exception.FirstReasoneException" />
						<include class="com.example.exception.SecondReasoneException" />
					</retryable-exception-classes>
					<retry-listeners>
						<listener ref="retry-listener" />
					</retry-listeners>
				</chunk>
				<listeners>
					<listener ref="skipListener" />
				</listeners>
			</tasklet>
		</step>
	</job>
	
	<bean id="retry-listener" class="com.example.listener.Slf4jRetryListener" />
	
	<bean id="retry-policy" class="org.springframework.batch.retry.policy.ExceptionClassifierRetryPolicy">
		<property name="policyMap">
			<map>
				<entry key="com.example.exception.FirstReasoneException">
					<bean class="org.springframework.batch.retry.policy.SimpleRetryPolicy">
						<property name="maxAttempts" value="3" />
					</bean>
				</entry>
				<entry key="com.example.exception.SecondReasoneException">
					<bean class="org.springframework.batch.retry.policy.SimpleRetryPolicy">
						<property name="maxAttempts" value="5" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<bean id="skipListener" class="com.example.listener.DatabaseSkipListener">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<bean id="decompressTasklet" class="com.example.batch.DecompressTasklet" scope="step">
		<property name="inputResource" value="#{jobParameters['inputResource']}" />
		<property name="targetDirectory" value="#{jobParameters['targetDirectory']}" />
		<property name="targetFile" value="#{jobParameters['targetFile']}" />
	</bean>
	
	<bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="resource" value="file:#{jobParameters['targetDirectory']+jobParameters['targetFile']}" />
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="ID,NAME,DESCRIPTION,PRICE" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.example.batch.ProductFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>
	
	<bean id="processor" class="com.example.processor.Processor" />

	<bean id="writer" class="com.example.batch.ProductJdbcItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>
</beans>